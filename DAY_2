PROGRAM-01
#include <stdio.h>

int main()
{
    int i, j, k, N;

    printf("Enter N: ");
    scanf("%d", &N);

    for(i=1; i<=N; i++)
    {
        k = i;

        // Logic to print numbers
        for(j=1; j<=i; j++, k++)
        {
            printf("%d", k);
        }

        printf("\n");
    }

    return 0;
}


PROGRAM-02

1
23
456
78910

#include<stdio.h>
int main()
{
  int i,j,k;
  k=1;
  for(i=1;i<5;i++)
  {
    for(j=1;j<=i;j++)
    {
      printf("%d",k++);
    }
    printf("\n");
  }
  return 0;
}


PROGRAM-06

1
232
34543
4567654
567898765

int main()
{
    int i,j,k;
    for(i=1;i<=5;i++)
    {
        j=i;
        for(k=1;k<=i;k++)
        {
            printf("%d",j++);
        }
        j-=2;
        for(k=j;k>=i;k--)
        {
            printf("%d",j--);
        }        
        printf("\n");
    }
    return 0;
}


PROGRAM-07
#include<stdio.h>

int main()
{
    int i,j,row;

    printf("Enter number of rows: ");
    scanf("%d",&row);

    for(i=1;i<=row;i++)
    {
        for(j=1;j<=row-i;j++)
        {
            printf(" ");
        }

        for(j=i;j>=1;j--)
        {
            printf("%d", j);
        }

        for(j=2;j<=i;j++)
        {
            printf("%d", j);
        }
        printf("\n");
    }

    return 0;
}

PROGRAM-11
1        1
12      21
123    321
1234  4321
1234554321

#include<stdio.h>

int main()
{
  int i,j,k;
  for(i=1;i<=5;i++)
  {
    for(j=1;j<=5;j++)
    {
      if(j<=i)
        printf("%d",j);
      else
        printf(" ");
    }
    for(j=5;j>=1;j--)
    {
      if(j<=i)
        printf("%d",j);
      else
        printf(" ");
    } 
    printf("\n");
  }
  return 0;
}

PROGRAM-13
     1       
      1 2 1     
    1 2 3 2 1   
  1 2 3 4 3 2 1 
1 2 3 4 5 4 3 2 1

int main()
{
    int i, j;
    for(i=1;i<=5;i++)
    {
      for(j=5;j>i;j--)
        printf("  ");
      for(j=1;j<=i;j++)
          printf("%d ",j);
      for(j=j-2;j>=1;j--)
          printf("%d ",j);
      printf("\n");
    }
    return 0;
}

PROGRAM-13
// C++ program to print pattern that first reduces 5 one
// by one, then adds 5. Without any loop
#include <bits/stdc++.h>
using namespace std;

// Recursive function to print the pattern.
// n indicates input value
// m indicates current value to be printed
// flag indicates whether we need to add 5 or
// subtract 5. Initially flag is true.
void printPattern(int n, int m, bool flag)
{
	// Print m.
	cout << m << " ";

	// If we are moving back toward the n and
	// we have reached there, then we are done
	if (flag == false && n == m)
		return;

	// If we are moving toward 0 or negative.
	if (flag) {
		// If m is greater, then 5, recur with true flag
		if (m - 5 > 0)
			printPattern(n, m - 5, true);
		else // recur with false flag
			printPattern(n, m - 5, false);
	}
	else // If flag is false.
		printPattern(n, m + 5, false);
}

// Recursive function to print the pattern
// variance where m is the input int32 value
void PrintPattern(int m)
{
	if (m > 0) {
		cout << m << '\n';
		PrintPattern(m - 5);
	}

	cout << m << '\n';
}

// Driver code
int main()
{
	int n = 16;
	
	// Function call
	PrintPattern(n);
	return 0;
}


PROBLEM-14
// C implementation of the approach
#include <stdio.h>

// Function to print the desired
// Alphabet Z Pattern
void alphabet_Z_Pattern(int N)
{
	int index, side_index, size;

	// Declaring the values of Right,
	// Left and Diagonal values
	int Top = 1, Bottom = 1, Diagonal = N - 1;

	// Loop for printing the first row
	for (index = 0; index < N; index++)
		printf("%d ", Top++);

	printf("\n");

	// Main Loop for the rows from (2 to n-1)
	for (index = 1; index < N - 1; index++) {

		// Spaces for the diagonals
		for (side_index = 0; side_index < 2 * (N - index - 1);
			side_index++)
			printf(" ");

		// Printing the diagonal values
		printf("%d", Diagonal--);

		printf("\n");
	}

	// Loop for printing the last row
	for (index = 0; index < N; index++)
		printf("%d ", Bottom++);
}

// Driver Code
int main()
{
	// Size of the Pattern
	int N = 5;

	alphabet_Z_Pattern(N);

	return 0;
}


PROGRAM-15
// C++ program to find n'th term in look and say
// sequence
#include <bits/stdc++.h>
using namespace std;

// Returns n'th term in look-and-say sequence
string countnndSay(int n)
{
	// Base cases
	if (n == 1)	 return "1";
	if (n == 2)	 return "11";

	// Find n'th term by generating all terms from 3 to
	// n-1. Every term is generated using previous term
	string str = "11"; // Initialize previous term
	for (int i = 3; i<=n; i++)
	{
		// In below for loop, previous character
		// is processed in current iteration. That
		// is why a dummy character is added to make
		// sure that loop runs one extra iteration.
		str += '$';
		int len = str.length();
    int cnt = 1; // Initialize count of matching chars
		string tmp = ""; // Initialize i'th term in series

		// Process previous term to find the next term
		for (int j = 1; j < len; j++)
		{
			// If current character doesn't match
			if (str[j] != str[j-1])
			{
				// Append count of str[j-1] to temp
				tmp += cnt + '0';

				// Append str[j-1]
				tmp += str[j-1];

				// Reset count
				cnt = 1;
			}

			// If matches, then increment count of matching
			// characters
			else cnt++;
		}

		// Update str
		str = tmp;
	}

	return str;
}

// Driver program
int main()
{
	int N = 3;
	cout << countnndSay(N) << endl;
	return 0;
}


PROGRAM-16
// C++ Program to print rectangular
// inner reducing pattern
#include <bits/stdc++.h>
using namespace std;

#define max 100

// function to Print pattern
void print(int a[][max], int size)
{
for (int i = 0; i < size; i++) {
	for (int j = 0; j < size; j++) {
	cout << a[i][j];
	}
	cout << endl;
}
}

// function to compute pattern
void innerPattern(int n) {
	
// Pattern Size
int size = 2 * n - 1;
int front = 0;
int back = size - 1;
int a[max][max];
while (n != 0)
{
	for (int i = front; i <= back; i++) {
	for (int j = front; j <= back; j++) {
		if (i == front || i == back ||
			j == front || j == back)
		a[i][j] = n;
	}
	}
	++front;
	--back;
	--n;
}
print(a, size);
}

// Driver code
int main()
{
	// Input
	int n = 4;
	
	// function calling
	innerPattern(n);
	
return 0;
}

// This code is contributed by Anant Agarwal.


PROGRAM-19
//  C program to print pascal’s triangle

#include
int main()
{
int rows, coef = 1, space, i, j;
printf(“\nEnter the number of rows : “);
scanf(“%d”,&rows);
printf(“\n”);

for(i=0; i<rows; i++)
{
for(space=1; space <= rows-i; space++)
printf(” “);

for(j=0; j <= i; j++)
{
if (j==0 || i==0)
coef = 1;
else
coef = coef*(i-j+1)/j;

printf(“%4d”, coef);
}
printf(“\n\n”);
}

return 0;
}

PROGRAM-20

#include<stdio.h>
#include<stdlib.h>

#define SIZE 20

int main()
{
    int order, i, j, k, p, q, mid, magic[SIZE][SIZE];

    printf("Enter order of magic square (order must be odd): ");
    scanf("%d", &order);

    if(order%2==0)
    {
        printf("Order must be odd.\n");
        printf("Exiting...");
        exit(0);
    }

    mid = order/2;

    for(i=0;i< order; i++)
    {
        for(j=0; j< order; j++)
        {
            magic[i][j]=0;
        }
    }

    k=mid;
    j=0;
    for(i=1; i<= order*order; i++)
    {
        magic[j][k] = i;
        p = j--;
        q = k++;

        if(j< 0)
        {
            j = order-1;
        }

        if(k>order-1)
        {
            k=0;
        }

        if(magic[j][k] != 0)
        {
            k = q;
            j = p+1;
        }
    }

    printf("Generated MAGIC SQUARE is:\n");
    for(i=1;i<=6*order;i++)
    {
        printf("-");
    }
    printf("\n");
    for(j=0;j< order;j++)
    {
        printf("|");
        for(k=0; k< order; k++)
        {
            printf("%4d |", magic[j][k]);
        }
        printf("\n");
        for(i=1; i<=6*order; i++)
        {
            printf("-");
        }
        printf("\n");
    }
    return 0;
}

PROGRAM-08

    *
   *** 
  *****
 *******
*********

#include <stdio.h>

int main()
{
    int i, j, k;
    for(i=1;i<=5;i++)
    {
        for(j=i;j<5;j++)
        {
            printf(" ");
        }
        for(k=1;k<(i*2);k++)
        {
                printf("*");
        }
        printf("\n");
    }

    return 0;
}

PROGRAM-09
    *
   *** 
  *****
 *******
*********
 *******
  *****
   ***   
    *

#include <stdio.h>

int main()
{
    int i, j, k;
    for(i=1;i<=5;i++)
    {
        for(j=i;j<5;j++)
        {
            printf(" ");
        }
        for(k=1;k<(i*2);k++)
        {
                printf("*");
        }
        printf("\n");
    }
    for(i=4;i>=1;i--)
    {
        for(j=5;j>i;j--)
        {
                printf(" ");
        }
        for(k=1;k<(i*2);k++)
        {
                printf("*");
        }
        printf("\n");
    }

    return 0;
}

PROGRAM-03
A
BB
CCC
DDDD
EEEEE


#include <stdio.h>

int main()
{
    int i, j;
    for(i=1;i<=5;i++)
    {
        for(j=1;j<=i;j++)
        {
            printf("%c",'A'-1 + i);
        }
        printf("\n");
    }

    return 0;
} 


PROGRAM-05

E
DE
CDE
BCDE
ABCDE


#include <stdio.h>

int main()
{
    int i, j;
    for(i=5;i>=1;i--)
    {
        for(j=i;j<=5;j++)
        {
            printf("%c",'A' + j-1);
        }
        printf("\n");
    }

    return 0;
}
